const twilio = require("twilio");
const logger = require("./logger");

// Initialize Twilio client
const initTwilioClient = () => {
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;

  if (!accountSid || !authToken) {
    logger.error("Twilio credentials not found in environment variables");
    return null;
  }

  try {
    return twilio(accountSid, authToken);
  } catch (error) {
    logger.error(`Failed to initialize Twilio client: ${error.message}`);
    return null;
  }
};

/**
 * Send SMS notification using Twilio
 * @param {string} to - Recipient's phone number (E.164 format)
 * @param {string} message - SMS message content
 * @returns {Promise<boolean>} - Success status
 */
const sendSMSNotification = async (to, message) => {
  try {
    const client = initTwilioClient();

    if (!client) {
      logger.error("Cannot send SMS: Twilio client not initialized");
      return false;
    }

    const twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER;

    if (!twilioPhoneNumber) {
      logger.error("Twilio phone number not found in environment variables");
      return false;
    }

    // Validate phone number format (basic E.164 check)
    if (!to.startsWith("+")) {
      logger.error(
        `Invalid phone number format: ${to}. Must be in E.164 format (e.g., +1XXXXXXXXXX)`
      );
      return false;
    }

    // Send SMS
    const result = await client.messages.create({
      body: message,
      from: twilioPhoneNumber,
      to: to
    });

    logger.info(`SMS sent successfully. SID: ${result.sid}`);
    return true;
  } catch (error) {
    logger.error(`Failed to send SMS: ${error.message}`);
    return false;
  }
};

/**
 * Format and send a medicine reminder SMS
 * @param {Object} user - User object with phone number
 * @param {Object} reminder - Reminder object with medicine details
 * @returns {Promise<Object>} - Twilio message object or error
 */
const sendReminderSMS = async (user, reminder) => {
  try {
    if (!user.phone) {
      throw new Error("User does not have a phone number");
    }

    const medicineNames = reminder.medicine?.name;

    const timeFormatted = new Date(reminder.time).toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit"
    });

    const message = `REMINDER: Time to take ${medicineNames} at ${timeFormatted}. Open the Medicine Reminder app to mark as taken.`;

    return await sendSMSNotification(user.phone, message);
  } catch (error) {
    logger.error(`Failed to send reminder SMS: ${error.message}`);
    throw error;
  }
};

/**
 * Format and send a missed dose SMS
 * @param {Object} user - User object with phone number
 * @param {Object} reminder - Reminder object with medicine details
 * @returns {Promise<Object>} - Twilio message object or error
 */
const sendMissedDoseSMS = async (user, reminder) => {
  try {
    if (!user.phone) {
      throw new Error("User does not have a phone number");
    }

    const medicineNames = reminder.medicine?.name;

    const timeFormatted = new Date(reminder.time).toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit"
    });

    const message = `MISSED DOSE: You missed taking ${medicineNames} scheduled for ${timeFormatted}. Please check the Medicine Reminder app.`;

    return await sendSMSNotification(user.phone, message);
  } catch (error) {
    logger.error(`Failed to send missed dose SMS: ${error.message}`);
    throw error;
  }
};

module.exports = {
  sendSMSNotification,
  sendReminderSMS,
  sendMissedDoseSMS
};
